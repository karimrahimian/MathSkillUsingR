R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Workspace loaded from ~/.RData]

Loading required package: maftools
> (a_list <- list(
+     c(1, 1, 2, 5, 14, 42),
+     #See http://oeis.org/A000108
+     month.abb,
+     matrix(c(3, -8, 1, -3), nrow = 2),
+     asin
+ ))
[[1]]
[1]  1  1  2  5 14 42

[[2]]
 [1] "Jan" "Feb" "Mar" "Apr" "May" "Jun" "Jul" "Aug" "Sep" "Oct"
[11] "Nov" "Dec"

[[3]]
     [,1] [,2]
[1,]    3    1
[2,]   -8   -3

[[4]]
function (x)  .Primitive("asin")

> names(a_list) <- c("catalan", "months", "involutary", "arcsin")
> a_list
$catalan
[1]  1  1  2  5 14 42

$months
 [1] "Jan" "Feb" "Mar" "Apr" "May" "Jun" "Jul" "Aug" "Sep" "Oct"
[11] "Nov" "Dec"

$involutary
     [,1] [,2]
[1,]    3    1
[2,]   -8   -3

$arcsin
function (x)  .Primitive("asin")

> (the_same_list <- list(
+ catalan
+ = c(1, 1, 2, 5, 14, 42),
+ months
+ = month.abb,
+ involutary = matrix(c(3, -8, 1, -3), nrow = 2),
+ arcsin
+ = asin
+ ))
$catalan
[1]  1  1  2  5 14 42

$months
 [1] "Jan" "Feb" "Mar" "Apr" "May" "Jun" "Jul" "Aug" "Sep" "Oct"
[11] "Nov" "Dec"

$involutary
     [,1] [,2]
[1,]    3    1
[2,]   -8   -3

$arcsin
function (x)  .Primitive("asin")

> (main_list <- list(
+     middle_list
+     = list(
+         element_in_middle_list = diag(3),
+         inner_list
+         = list(
+             element_in_inner_list
+             = pi ^ 1:4,
+             another_element_in_inner_list = "a"
+         )
+     ),
+     element_in_main_list = log10(1:10)
+ ))
$middle_list
$middle_list$element_in_middle_list
     [,1] [,2] [,3]
[1,]    1    0    0
[2,]    0    1    0
[3,]    0    0    1

$middle_list$inner_list
$middle_list$inner_list$element_in_inner_list
[1] 3.141593

$middle_list$inner_list$another_element_in_inner_list
[1] "a"



$element_in_main_list
 [1] 0.0000000 0.3010300 0.4771213 0.6020600 0.6989700 0.7781513
 [7] 0.8450980 0.9030900 0.9542425 1.0000000

> is.atomic(list())
[1] FALSE
> is.recursive(list())
[1] TRUE
> is.atomic(numeric())
[1] TRUE
> is.recursive(numeric())
[1] FALSE
> length(a_list)
[1] 4
> length(main_list)
[1] 2
> dim(a_list)
NULL
> nrow(a_list)
NULL
> ncol(a_list)
NULL
> NROW(a_list)
[1] 4
> NCOL(a_list)
[1] 1
> l1 = list(1:5)
> l2 = list(6:10)
> l1[[1]]+l2[[1]]
[1]  7  9 11 13 15
> l <- list(
+     first = 1,
+     second = 2,
+     third = list(
+         alpha = 3.1,
+         beta = 3.2
+     )
+ )
> l[1:2]
$first
[1] 1

$second
[1] 2

> l[-3]
$first
[1] 1

$second
[1] 2

> l[c("first","second")]
$first
[1] 1

$second
[1] 2

> l[c(TRUE,TRUE,FALSE)]
$first
[1] 1

$second
[1] 2

> l[[1]]
[1] 1
> l[["first"]]
[1] 1
> is.list(l[1])
[1] TRUE
> is.list(l[[1]])
[1] FALSE
> l$first
[1] 1
> l$f
[1] 1
> l[["third"]]["beta"]
$beta
[1] 3.2

> l[["third"]][["beta"]]
[1] 3.2
> l[[c("third", "beta")]]
[1] 3.2
> l[c(4, 2, 5)]
$<NA>
NULL

$second
[1] 2

$<NA>
NULL

> l[c("fourth", "second", "fifth")]
$<NA>
NULL

$second
[1] 2

$<NA>
NULL

> l[["fourth"]]
NULL
> l$fourth
NULL
> l[[4]]
Error in l[[4]] : subscript out of bounds
> busy_beaver <- c(1, 6, 21, 107)
> as.list(busy_beaver)
[[1]]
[1] 1

[[2]]
[1] 6

[[3]]
[1] 21

[[4]]
[1] 107

> as.numeric(list(1, 6, 21, 107))
[1]   1   6  21 107
> (prime_factors <- list(
+ two
+ = 2,
+ three = 3,
+ four = c(2, 2),
+ five = 5,
+ six
+ = c(2, 3),
+ seven = 7,
+ eight = c(2, 2, 2),
+ nine = c(3, 3),
+ ten
+ = c(2, 5)
+ ))
$two
[1] 2

$three
[1] 3

$four
[1] 2 2

$five
[1] 5

$six
[1] 2 3

$seven
[1] 7

$eight
[1] 2 2 2

$nine
[1] 3 3

$ten
[1] 2 5

> (prime_factors <- list(
+     two
+     = 2,
+     three = 3,
+     four = c(2, 2),
+     five = 5,
+     six
+     = c(2, 3),
+     seven = 7,
+     eight = c(2, 2, 2),
+     nine = c(3, 3),
+     ten
+     = c(2, 5)
+ ))
$two
[1] 2

$three
[1] 3

$four
[1] 2 2

$five
[1] 5

$six
[1] 2 3

$seven
[1] 7

$eight
[1] 2 2 2

$nine
[1] 3 3

$ten
[1] 2 5

> unlist(prime_factors)
   two  three  four1  four2   five   six1   six2  seven eight1 
     2      3      2      2      5      2      3      7      2 
eight2 eight3  nine1  nine2   ten1   ten2 
     2      2      3      3      2      5 
> c(list(a = 1, b = 2), list(3))
$a
[1] 1

$b
[1] 2

[[3]]
[1] 3

> c(list(a = 1, b = 2), 3)
$a
[1] 1

$b
[1] 2

[[3]]
[1] 3

> (matrix_list_hybrid <- cbind(
+ list(a = 1, b = 2),
+ list(c = 3, list(d = 4))
+ ))
  [,1] [,2]  
a 1    3     
b 2    list,1
> str(matrix_list_hybrid)
List of 4
 $ : num 1
 $ : num 2
 $ : num 3
 $ :List of 1
  ..$ d: num 4
 - attr(*, "dim")= int [1:2] 2 2
 - attr(*, "dimnames")=List of 2
  ..$ : chr [1:2] "a" "b"
  ..$ : NULL
> (uk_bank_holidays_2013 <- list(
+     Jan = "New Year's Day",
+     Feb = NULL,
+     Mar = "Good Friday",
+     Apr = "Easter Monday",
+     May = c("Early May Bank Holiday", "Spring Bank Holiday"),
+     Jun = NULL,
+     Jul = NULL,
+     Aug = "Summer Bank Holiday",
+     Sep = NULL,
+     Oct = NULL,
+     Nov = NULL,
+     Dec = c("Christmas Day", "Boxing Day")
+ ))
$Jan
[1] "New Year's Day"

$Feb
NULL

$Mar
[1] "Good Friday"

$Apr
[1] "Easter Monday"

$May
[1] "Early May Bank Holiday" "Spring Bank Holiday"   

$Jun
NULL

$Jul
NULL

$Aug
[1] "Summer Bank Holiday"

$Sep
NULL

$Oct
NULL

$Nov
NULL

$Dec
[1] "Christmas Day" "Boxing Day"   

> length(NULL)
[1] 0
> length(NA
+        )
[1] 1
> is.null(NULL)
[1] TRUE
> is.null(NA)
[1] FALSE
> is.na(NULL)
logical(0)
> uk_bank_holidays_2013$Jan <- NULL
> uk_bank_holidays_2013$Feb <- NULL
> uk_bank_holidays_2013
$Mar
[1] "Good Friday"

$Apr
[1] "Easter Monday"

$May
[1] "Early May Bank Holiday" "Spring Bank Holiday"   

$Jun
NULL

$Jul
NULL

$Aug
[1] "Summer Bank Holiday"

$Sep
NULL

$Oct
NULL

$Nov
NULL

$Dec
[1] "Christmas Day" "Boxing Day"   

> uk_bank_holidays_2013["Aug"] <- list(NULL)
> uk_bank_holidays_2013
$Mar
[1] "Good Friday"

$Apr
[1] "Easter Monday"

$May
[1] "Early May Bank Holiday" "Spring Bank Holiday"   

$Jun
NULL

$Jul
NULL

$Aug
NULL

$Sep
NULL

$Oct
NULL

$Nov
NULL

$Dec
[1] "Christmas Day" "Boxing Day"   

> (arguments_of_sd <- formals(sd))
$x


$na.rm
[1] FALSE

> class(arguments_of_sd)
[1] "pairlist"
> pairlist()
NULL
> list()
list()
> (a_data_frame <- data.frame(
+     x = letters[1:5],
+     y = rnorm(5),
+     z = runif(5) > 0.5
+ ))
  x          y     z
1 a -1.9916455  TRUE
2 b  0.1719538 FALSE
3 c -0.3158913 FALSE
4 d -0.1232827 FALSE
5 e  1.3515788 FALSE
> class(a_data_frame)
[1] "data.frame"
> y <- rnorm(5)
> names(y) <- month.name[1:5]
> data.frame(
+     x = letters[1:5],
+     y = y,
+     z = runif(5) > 0.5
+ )
         x          y     z
January  a  0.4069775  TRUE
February b -2.2038389 FALSE
March    c -2.2444720  TRUE
April    d  0.5317824 FALSE
May      e -0.7307093 FALSE
> data.frame(
+     x = letters[1:5],
+     y = y,
+     z = runif(5) > 0.5,
+     row.names = NULL
+ )
  x          y     z
1 a  0.4069775 FALSE
2 b -2.2038389 FALSE
3 c -2.2444720 FALSE
4 d  0.5317824  TRUE
5 e -0.7307093  TRUE
> data.frame(
+     x = letters[1:5],
+     y = y,
+     z = runif(5) > 0.5,
+     row.names = c("Jackie", "Tito", "Jermaine", "Marlon", "Michael")
+ )
         x          y     z
Jackie   a  0.4069775  TRUE
Tito     b -2.2038389  TRUE
Jermaine c -2.2444720 FALSE
Marlon   d  0.5317824 FALSE
Michael  e -0.7307093  TRUE
> rownames(a_data_frame)
[1] "1" "2" "3" "4" "5"
> dimnames(a_data_frame)
[[1]]
[1] "1" "2" "3" "4" "5"

[[2]]
[1] "x" "y" "z"

> nrow(a_data_frame)
[1] 5
> ncol(a_data_frame)
[1] 3
> dim(a_data_frame)
[1] 5 3
> length(a_data_frame)
[1] 3
> names(a_data_frame)
[1] "x" "y" "z"
> data.frame(
+     x = 1,
+     y = 2:3,
+     z = 4:7
+ )
  x y z
1 1 2 4
2 1 3 5
3 1 2 6
4 1 3 7
> data.frame(
+ x = 1,
+ y = 2:3,
+ z = 4:6
+ )
Error in data.frame(x = 1, y = 2:3, z = 4:6) : 
  arguments imply differing number of rows: 1, 2, 3
> data.frame(
+     "A column"
+     = letters[1:5],
+     "!@#$%^&*()" = rnorm(5),
+     "..."
+     = runif(5) > 0.5,
+     check.names = FALSE
+ )
  A column  !@#$%^&*()   ...
1        a  1.18642501  TRUE
2        b -0.86451006 FALSE
3        c  0.32798096 FALSE
4        d -1.25216492  TRUE
5        e  0.02907764 FALSE
> a_data_frame[2:3, -3]
  x          y
2 b  0.1719538
3 c -0.3158913
> a_data_frame[c(FALSE, TRUE, TRUE, FALSE, FALSE), c("x", "y")]
  x          y
2 b  0.1719538
3 c -0.3158913
> class(a_data_frame[2:3, -3])
[1] "data.frame"
> class(a_data_frame[2:3, 1])
[1] "character"
> a_data_frame$x[2:3]
[1] "b" "c"
> a_data_frame[[1]][2:3]
[1] "b" "c"
> a_data_frame[["x"]][2:3]
[1] "b" "c"
> a_data_frame$x[2:3]
[1] "b" "c"
> a_data_frame[[1]][2:3]
[1] "b" "c"
> a_data_frame[["x"]][2:3]
[1] "b" "c"
> a_data_frame[a_data_frame$y > 0 | a_data_frame$z, "x"]
[1] "a" "b" "e"
> subset(a_data_frame, y > 0 | z, x)
  x
1 a
2 b
5 e
> t(a_data_frame)
  [,1]         [,2]         [,3]         [,4]        
x "a"          "b"          "c"          "d"         
y "-1.9916455" " 0.1719538" "-0.3158913" "-0.1232827"
z "TRUE"       "FALSE"      "FALSE"      "FALSE"     
  [,5]        
x "e"         
y " 1.3515788"
z "FALSE"     
> another_data_frame <- data.frame( #same cols as a_data_frame, different order
+     z = rlnorm(5),
+     #lognormally distributed numbers
+     y = sample(5),
+     #the numbers 1 to 5, in some order
+     x = letters[3:7]
+ )
> rbind(a_data_frame, another_data_frame)
   x          y         z
1  a -1.9916455 1.0000000
2  b  0.1719538 0.0000000
3  c -0.3158913 0.0000000
4  d -0.1232827 0.0000000
5  e  1.3515788 0.0000000
6  c  3.0000000 1.3532854
7  d  1.0000000 1.2573164
8  e  5.0000000 0.9447411
9  f  4.0000000 0.6332929
10 g  2.0000000 5.8635129
> merge(a_data_frame, another_data_frame, by = "x")
  x        y.x   z.x       z.y y.y
1 c -0.3158913 FALSE 1.3532854   3
2 d -0.1232827 FALSE 1.2573164   1
3 e  1.3515788 FALSE 0.9447411   5
> merge(a_data_frame, another_data_frame, by = "x", all = TRUE)
  x        y.x   z.x       z.y y.y
1 a -1.9916455  TRUE        NA  NA
2 b  0.1719538 FALSE        NA  NA
3 c -0.3158913 FALSE 1.3532854   3
4 d -0.1232827 FALSE 1.2573164   1
5 e  1.3515788 FALSE 0.9447411   5
6 f         NA    NA 0.6332929   4
7 g         NA    NA 5.8635129   2
> colSums(a_data_frame[, 2:3])
        y         z 
-0.907287  1.000000 
> colMeans(a_data_frame[, 2:3])
         y          z 
-0.1814574  0.2000000 
